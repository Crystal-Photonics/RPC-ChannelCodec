<?xml version="1.0" encoding="UTF-8"?>
<RPC>
	<function name="setCPS">
		<declaration>RPC_UART_RESULT setCPS(uint16_t cps);</declaration>
		<request ID="2">
			<parameter name="cps" type="integer" position="1" ctype="uint16_t" bits="16">
				<integer signed="False"/>
			</parameter>
		</request>
	</function>
	<function name="simpleTest">
		<declaration>RPC_UART_RESULT simpleTest(int32_t return_value_out[1], int32_t i);</declaration>
		<request ID="4">
			<parameter name="i" type="integer" position="1" ctype="int32_t" bits="32">
				<integer signed="True"/>
			</parameter>
		</request>
		<reply ID="5">
			<parameter name="return_value_out" type="array" position="1" ctype="int32_t [1]" bits="32">
				<array type="integer" ctype="int32_t" bits="32" elements="1">
					<integer signed="True"/>
				</array>
			</parameter>
		</reply>
	</function>
	<function name="arrayTest">
		<declaration>RPC_UART_RESULT arrayTest(char text_inout[42]);</declaration>
		<request ID="6">
			<parameter name="text_inout" type="array" position="1" ctype="char [42]" bits="336">
				<array type="character" ctype="char" bits="8" elements="42"/>
			</parameter>
		</request>
		<reply ID="7">
			<parameter name="text_inout" type="array" position="1" ctype="char [42]" bits="336">
				<array type="character" ctype="char" bits="8" elements="42"/>
			</parameter>
		</reply>
	</function>
	<function name="multiArrayTest">
		<declaration>RPC_UART_RESULT multiArrayTest(char text_inout[2][3][4]);</declaration>
		<request ID="8">
			<parameter name="text_inout" type="array" position="1" ctype="char [2][3][4]" bits="192">
				<array type="array" ctype="char [3][4]" bits="96" elements="2">
					<array type="array" ctype="char [4]" bits="32" elements="3">
						<array type="character" ctype="char" bits="8" elements="4"/>
					</array>
				</array>
			</parameter>
		</request>
		<reply ID="9">
			<parameter name="text_inout" type="array" position="1" ctype="char [2][3][4]" bits="192">
				<array type="array" ctype="char [3][4]" bits="96" elements="2">
					<array type="array" ctype="char [4]" bits="32" elements="3">
						<array type="character" ctype="char" bits="8" elements="4"/>
					</array>
				</array>
			</parameter>
		</reply>
	</function>
	<function name="arrayInputTest">
		<declaration>RPC_UART_RESULT arrayInputTest(char text_in[42]);</declaration>
		<request ID="10">
			<parameter name="text_in" type="array" position="1" ctype="char [42]" bits="336">
				<array type="character" ctype="char" bits="8" elements="42"/>
			</parameter>
		</request>
		<reply ID="11"/>
	</function>
	<function name="arrayOutputTest">
		<declaration>RPC_UART_RESULT arrayOutputTest(char text_out[42]);</declaration>
		<request ID="12"/>
		<reply ID="13">
			<parameter name="text_out" type="array" position="1" ctype="char [42]" bits="336">
				<array type="character" ctype="char" bits="8" elements="42"/>
			</parameter>
		</reply>
	</function>
	<function name="arrayInputOutputTest">
		<declaration>RPC_UART_RESULT arrayInputOutputTest(char text_inout[42]);</declaration>
		<request ID="14">
			<parameter name="text_inout" type="array" position="1" ctype="char [42]" bits="336">
				<array type="character" ctype="char" bits="8" elements="42"/>
			</parameter>
		</request>
		<reply ID="15">
			<parameter name="text_inout" type="array" position="1" ctype="char [42]" bits="336">
				<array type="character" ctype="char" bits="8" elements="42"/>
			</parameter>
		</reply>
	</function>
	<function name="emptyTest">
		<declaration>RPC_UART_RESULT emptyTest(void);</declaration>
		<request ID="16"/>
		<reply ID="17"/>
	</function>
	<function name="noAnswerTest">
		<declaration>RPC_UART_RESULT noAnswerTest(void);</declaration>
		<request ID="18"/>
	</function>
	<function name="multipleParametersTest">
	<declaration>RPC_UART_RESULT multipleParametersTest(uint8_t p1, uint16_t p2, uint32_t p3);</declaration>
		<request ID="20">
			<parameter name="p1" type="integer" position="1" ctype="uint8_t" bits="8">
				<integer signed="False"/>
			</parameter>
			<parameter name="p2" type="integer" position="2" ctype="uint16_t" bits="16">
				<integer signed="False"/>
			</parameter>
			<parameter name="p3" type="integer" position="3" ctype="uint32_t" bits="32">
				<integer signed="False"/>
			</parameter>
		</request>
		<reply ID="21"/>
	</function>
	<function name="structTest">
		<declaration>RPC_UART_RESULT structTest(struct TestStruct s_out[1]);</declaration>
		<request ID="22"/>
		<reply ID="23">
			<parameter name="s_out" type="array" position="1" ctype="struct TestStruct [1]" bits="64">
				<array type="struct" ctype="struct TestStruct" bits="8" elements="1">
					<parameter name="n1" type="integer" ctype="uint32_t" bits="32" memberpos="1">
						<integer signed="False"/>
					</parameter>
					<parameter name="n2" type="integer" ctype="int16_t" bits="16" memberpos="2">
						<integer signed="True"/>
					</parameter>
					<parameter name="n3" type="character" ctype="char" bits="8" memberpos="3"/>
					<parameter name="n4" type="integer" ctype="uint8_t" bits="8" memberpos="4">
						<integer signed="False"/>
					</parameter>
				</array>
			</parameter>
		</reply>
	</function>
	<function name="typedefStructTest">
		<declaration>RPC_UART_RESULT typedefStructTest(TypedefTestStruct s_inout[1]);</declaration>
		<request ID="24">
			<parameter name="s_inout" type="array" position="1" ctype="TypedefTestStruct [1]" bits="400">
				<array type="struct" ctype="TypedefTestStruct" bits="50" elements="1">
				<parameter name="n" type="integer" ctype="uint16_t" bits="16" memberpos="1">
					<integer signed="False"/>
				</parameter>
				<parameter name="ia" type="array" ctype="uint8_t [42]" bits="336" memberpos="2">
					<array type="integer" ctype="uint8_t" bits="8" elements="42">
						<integer signed="False"/>
					</array>
				</parameter>
				<parameter name="iaa" type="array" ctype="uint8_t [1][2][3]" bits="48" memberpos="3">
					<array type="array" ctype="uint8_t [2][3]" bits="48" elements="1">
						<array type="array" ctype="uint8_t [3]" bits="24" elements="2">
							<array type="integer" ctype="uint8_t" bits="8" elements="3">
								<integer signed="False"/>
							</array>
						</array>
					</array>
				</parameter>
				</array>
			</parameter>
		</request>
		<reply ID="25">
			<parameter name="s_inout" type="array" position="1" ctype="TypedefTestStruct [1]" bits="400">
				<array type="struct" ctype="TypedefTestStruct" bits="50" elements="1">
					<parameter name="n" type="integer" ctype="uint16_t" bits="16" memberpos="1">
						<integer signed="False"/>
					</parameter>
					<parameter name="ia" type="array" ctype="uint8_t [42]" bits="336" memberpos="2">
						<array type="integer" ctype="uint8_t" bits="8" elements="42">
						<integer signed="False"/>
						</array>
					</parameter>
					<parameter name="iaa" type="array" ctype="uint8_t [1][2][3]" bits="48" memberpos="3">
						<array type="array" ctype="uint8_t [2][3]" bits="48" elements="1">
							<array type="array" ctype="uint8_t [3]" bits="24" elements="2">
								<array type="integer" ctype="uint8_t" bits="8" elements="3">
									<integer signed="False"/>
								</array>
							</array>
						</array>
					</parameter>
				</array>
			</parameter>
		</reply>
	</function>
	<function name="enumTest1">
		<declaration>RPC_UART_RESULT enumTest1(enum TestEnum testEnum);</declaration>
		<request ID="26">
			<parameter name="testEnum" type="enum" position="1" ctype="enum TestEnum" bits="8">
				<enum name="TEa" value="0"/>
				<enum name="TEb" value="1"/>
				<enum name="TEc" value="- 5"/>
			</parameter>
		</request>
		<reply ID="27"/>
	</function>
	<function name="typedefEnumTest1">
		<declaration>RPC_UART_RESULT typedefEnumTest1(TypedefTestEnum testEnum);</declaration>
		<request ID="28">
			<parameter name="testEnum" type="enum" position="1" ctype="TypedefTestEnum" bits="32">
				<enum name="TTEa" value="0"/>
				<enum name="TTEb" value="1"/>
				<enum name="TTEc" value="5"/>
				<enum name="TTEd" value="TTEc + 1"/>
			</parameter>
		</request>
		<reply ID="29"/>
	</function>
	<function name="typedefEnumTest2">
		<declaration>RPC_UART_RESULT typedefEnumTest2(TypedefTestEnum return_value_out[1]);</declaration>
		<request ID="30"/>
		<reply ID="31">
			<parameter name="return_value_out" type="array" position="1" ctype="TypedefTestEnum [1]" bits="32">
				<array type="enum" ctype="TypedefTestEnum" bits="32" elements="1">
					<enum name="TTEa" value="0"/>
					<enum name="TTEb" value="1"/>
					<enum name="TTEc" value="5"/>
					<enum name="TTEd" value="TTEc + 1"/>
			</array>
			</parameter>
		</reply>
	</function>
</RPC>